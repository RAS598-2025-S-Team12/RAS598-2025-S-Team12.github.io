{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":"","tags":["tag1","tag2"]},{"location":"#i-introduction","title":"I. Introduction","text":"","tags":["tag1","tag2"]},{"location":"#project-name-automatic-delivery-turtlebot-systems","title":"Project name: Automatic Delivery Turtlebot Systems","text":"","tags":["tag1","tag2"]},{"location":"#i-team-number","title":"i. Team number","text":"<ul> <li>Team 12</li> </ul>","tags":["tag1","tag2"]},{"location":"#ii-team-members","title":"ii. Team members","text":"<ul> <li>Sandy Lin</li> <li>Alan Cheng</li> <li>Yibo Yuan</li> </ul>","tags":["tag1","tag2"]},{"location":"#iii-academic-year","title":"iii. Academic Year","text":"<ul> <li>2025 Spring</li> </ul>","tags":["tag1","tag2"]},{"location":"#iv-university","title":"iv. University","text":"<ul> <li>Arizona State University</li> </ul>","tags":["tag1","tag2"]},{"location":"#v-class","title":"v. Class","text":"<ul> <li>RAS598 Experimentation and Deployment of Robotic Systems</li> </ul>","tags":["tag1","tag2"]},{"location":"#vi-instructor","title":"vi. Instructor","text":"<ul> <li>Daniel M. Aukes</li> </ul>","tags":["tag1","tag2"]},{"location":"#ii-project","title":"II. Project","text":"","tags":["tag1","tag2"]},{"location":"#i-project-description","title":"i. Project description","text":"","tags":["tag1","tag2"]},{"location":"#concept","title":"Concept:","text":"<p>Our project combines a UR5 robotic arm with a Turtlebot to create an automated delivery robot systems. We will set up three cargo stations (A, B, C) and three different types of cargo (a, b, c). The UR5 robotic arm will randomly transfer the cargo onto the Turtlebot, and after the Turtlebot reads the cargo's Aruco marker, it will deliver the corresponding cargo to the designated station.</p>","tags":["tag1","tag2"]},{"location":"#the-research-question-this-project-seeks-to-answer-is","title":"The research question this project seeks to answer is:","text":"<p>To present how can the integration of a UR5 robotic arm and a Turtlebot automate and optimize the process of sorting and delivering different types of goods to designated stations.</p>","tags":["tag1","tag2"]},{"location":"#ii-sensor-integration","title":"ii. Sensor Integration","text":"<p>The LiDAR will be used to collect a 3D point cloud and convert it into a map. During testing, we ensure that the LiDAR accurately maps the environment and effectively avoids obstacles by comparing real-time data with the generated map. The IMU is evaluated to confirm that it precisely measures movement and maintains stability, which is vital for the robot's mobility. Additionally, the camera\u2019s ability to recognize ArUco markers under various conditions will be tested, addressing potential issues like lighting changes or occlusion. In the final demonstration, the LiDAR will be fully integrated to enable smooth navigation, ensuring that the Turtlebot moves efficiently without collisions. The IMU will be used to maintain the Turtlebot's balance and ensure stable movement during delivery tasks, and the camera will reliably identify markers to direct the Turtlebot to the correct station for each cargo.</p>","tags":["tag1","tag2"]},{"location":"#iii-interaction","title":"iii. Interaction","text":"","tags":["tag1","tag2"]},{"location":"#rviz-interface","title":"RViz Interface:","text":"<p>We will use RViz to visualize robot states, sensor data, task progress, and debugging information in real-time.</p>","tags":["tag1","tag2"]},{"location":"#gazebo-simulation","title":"Gazebo Simulation:","text":"<p>We will use Gazebo to simulate and validate robot behaviors, test all kinds of scenarios virtually before real-world deployment, and ensure system stability.</p>","tags":["tag1","tag2"]},{"location":"#iv-control-and-autonomy","title":"iv. Control and Autonomy","text":"<p>The processed sensor data enables real-time responses such as collision avoidance, stability adjustments, and immediate path corrections. For instance, the LiDAR data helps detect unexpected obstacles, while the IMU provides vital motion and balance information. At the higher level, the controller uses the refined sensor data to update path planning, ensuring the Turtlebot navigates efficiently and delivers cargo to the correct station based on marker recognition.</p>","tags":["tag1","tag2"]},{"location":"#v-preparation-needs","title":"v. Preparation needs","text":"<p>To build the system, we need to understand how communication between UR5 and TurtleBot 4 works. Choosing the most suitable path-planning algorithm, such as Dijkstra, A*, or a more optimized alternative, is crucial for efficient TurtleBot 4 navigation and minimizing delivery time. Lastly, integrating useful Python packages like OpenCV for object detection will enhance the system's capabilities.</p>","tags":["tag1","tag2"]},{"location":"#vi-final-demonstrartion","title":"vi. Final Demonstrartion","text":"","tags":["tag1","tag2"]},{"location":"#what-resources-will-you-need","title":"What resources will you need?","text":"<ul> <li>The reference project on internet like similar projects in Github and any materials given by Prof. Aukes.</li> <li>UR5 robotic arm and turtlebot robot</li> <li>Sensor like IMU, LIDAR, encoders, etc.</li> <li>High-performance computer</li> </ul>","tags":["tag1","tag2"]},{"location":"#describe-the-classroom-setup-requirements","title":"Describe the classroom setup requirements.","text":"<ul> <li>UR5 robot arm</li> <li>A few small boxes</li> <li>Several boards make up the obstacle course. </li> <li>Enough space for robotic operation</li> </ul>","tags":["tag1","tag2"]},{"location":"#conditions-change-in-any-environment-how-will-your-robot-handle-variability-in-its-environment","title":"Conditions change in any environment. How will your robot handle variability in its environment?","text":"<p>We will test under serval different obstacle conditions to ensure that the robot are robust enough to handle variability.</p>","tags":["tag1","tag2"]},{"location":"#testing-evaluation-plan-please-describe-how-you-can-verify-your-system-is-working-as-expected","title":"Testing &amp; Evaluation plan: Please describe how you can verify your system is working as expected?","text":"<p>We will conduct several tests to see if the robot works accurately. We will compare the sensor data and analog outputs to real-world conditions to ensure that our designed algorithms can accurately adapt to environmental changes.</p>","tags":["tag1","tag2"]},{"location":"#vii-impact","title":"vii. Impact","text":"<p>This project will enhance our understanding of multi-robot communication by coordinating the UR5 robotic arm and TurtleBot 4. Building a Gazebo simulation will help us test and refine the system, while RViz will provide real-time visualization and debugging. Developing our own user interface will improve interaction and control. Lastly, exploring different path-planning algorithms will deepen our knowledge of autonomous navigation.</p>","tags":["tag1","tag2"]},{"location":"#viii-advising","title":"viii. Advising","text":"<p>Dr. Aukes serves as our advisor for this project, providing technical guidance and hardware support. With his expertise in ROS2 development, robotic motion planning, and control systems, he plays a crucial role in helping us navigate the technical challenges of integrating the UR5 robotic arm and Turtlebot. Additionally, we plan to seek further technical guidance from other experts in the field to ensure the success of our project.</p>","tags":["tag1","tag2"]},{"location":"#iv-project-progress-future-tasks","title":"iv. Project Progress &amp; Future Tasks","text":"","tags":["tag1","tag2"]},{"location":"#current-achievements","title":"Current Achievements:","text":"<ol> <li>UR5 Robotic Arm Control We successfully implemented control over the UR5 robotic arm, enabling it to perform pick-and-place tasks from point A to point B.</li> </ol> <ol> <li> <p>GUI Enhancement: Added an \"Origin\" button based on the previously developed GUI. After initiating the system with the \"Start\" button, pressing \"Origin\" commands the Turtlebot to move to the designated position and wait to receive colored blocks.</p> </li> <li> <p>Predefined Actions: We successfully enabled the TurtleBot to execute predefined actions. When button A is pressed, it moves forward 3 meters and then turns left for 1 meter; when button B is pressed, it moves forward 3 meters and then turns right for 1 meter.</p> </li> </ol> <ol> <li> <p>Path Planning Algorithm Implementation: Created an initial version of path planning within ttb_nav.py, incorporating obstacle detection and avoidance using ROS2's Nav2 framework.</p> </li> <li> <p>Color Detection and Topic Publishing: Integrated color detection logic in block_detector.py. Once the dominant color of a block is identified, it is published to the turtlebot_14/block_info topic. The Turtlebot subscribes to this topic to determine which workstation to navigate to based on the block color.</p> </li> </ol>","tags":["tag1","tag2"]},{"location":"#upcoming-tasks","title":"Upcoming Tasks:","text":"<ol> <li> <p>Continuous Task Flow Logic: Develop a controller that enables continuous round-trip operations between the UR5, the color detection positions, and the drop-off block position.</p> </li> <li> <p>Path Planning Optimization: Optimize the current path planning logic with more advanced algorithms such as A* or Dijkstra to enhance navigation efficiency and stability.</p> </li> <li> <p>RViz Integration: Add RViz visualization to support real-time monitoring and build a digital twin for the delivery system.</p> </li> <li> <p>System Integration and Validation</p> </li> </ol>","tags":["tag1","tag2"]},{"location":"charts/","title":"Charts","text":"<pre><code>\ngraph TD\n    Start[System Start] --&gt; UR5_Pickup[UR5 randomly picks up object]\n    UR5_Pickup --&gt; Wait_Turtlebot[Wait for Turtlebot arrival]\n\n    Wait_Turtlebot --&gt;|Turtlebot arrived| Place_Object[Place object on Turtlebot platform]\n    Wait_Turtlebot --&gt;|Turtlebot not arrived| Wait_Turtlebot\n\n    Place_Object --&gt; UR5_Reset[UR5 returns to standby position]\n    UR5_Reset --&gt; Wait_Turtlebot\n\n    Place_Object --&gt; Turtlebot_Identify[Turtlebot identifies Aruco marker on object]\n    Turtlebot_Identify --&gt; Path_Planning[Turtlebot plans path to workstation based on Aruco marker]\n    Path_Planning --&gt; Navigate_Workstation[Turtlebot navigates to workstation]\n\n    Navigate_Workstation --&gt; Arrive_Workstation[Arrives at workstation]\n    Arrive_Workstation --&gt; Turtlebot_Arm_Pickup[Turtlebot's arm picks up object]\n    Turtlebot_Arm_Pickup --&gt; Place_Workstation[Object placed onto workstation]\n\n    Place_Workstation --&gt; Turtlebot_Return[Turtlebot returns to predefined location]\n    Turtlebot_Return --&gt; Wait_For_Object[Turtlebot waits for next object]\n\n    Wait_For_Object --&gt;|Next object ready| Wait_Turtlebot\n    Wait_Turtlebot --&gt;|Process completed| End[Process End]\n</code></pre>"},{"location":"timeline/","title":"Gantt Chart","text":""},{"location":"static/node_modules/mathjax/","title":"MathJax","text":""},{"location":"static/node_modules/mathjax/#beautiful-math-in-all-browsers","title":"Beautiful math in all browsers","text":"<p>MathJax is an open-source JavaScript display engine for LaTeX, MathML, and AsciiMath notation that works in all modern browsers.  It was designed with the goal of consolidating the recent advances in web technologies into a single, definitive, math-on-the-web platform supporting the major browsers and operating systems.  It requires no setup on the part of the user (no plugins to download or software to install), so the page author can write web documents that include mathematics and be confident that users will be able to view it naturally and easily.  Simply include MathJax and some mathematics in a web page, and MathJax does the rest.</p> <p>Some of the main features of MathJax include:</p> <ul> <li> <p>High-quality display of LaTeX, MathML, and AsciiMath notation in HTML pages</p> </li> <li> <p>Supported in most browsers with no plug-ins, extra fonts, or special   setup for the reader</p> </li> <li> <p>Easy for authors, flexible for publishers, extensible for developers</p> </li> <li> <p>Supports math accessibility, cut-and-paste interoperability, and other   advanced functionality</p> </li> <li> <p>Powerful API for integration with other web applications</p> </li> </ul> <p>See http://www.mathjax.org/ for additional details about MathJax, and https://docs.mathjax.org for the MathJax documentation.</p>"},{"location":"static/node_modules/mathjax/#mathjax-components","title":"MathJax Components","text":"<p>MathJax version 3 uses files called components that contain the various MathJax modules that you can include in your web pages or access on a server through NodeJS.  Some components combine all the pieces you need to run MathJax with one or more input formats and a particular output format, while other components are pieces that can be loaded on demand when needed, or by a configuration that specifies the pieces you want to combine in a custom way.  For usage instructions, see the MathJax documentation.</p> <p>Components provide a convenient packaging of MathJax's modules, but it is possible for you to form your own custom components, or to use MathJax's modules directly in a node application on a server.  There are web examples showing how to use MathJax in web pages and how to build your own components, and node examples illustrating how to use components in node applications or call MathJax modules directly.</p>"},{"location":"static/node_modules/mathjax/#whats-in-this-repository","title":"What's in this Repository","text":"<p>This repository contains only the component files for MathJax, not the source code for MathJax (which are available in a separate MathJax source repository).  These component files are the ones served by the CDNs that offer MathJax to the web.  In version 2, the files used on the web were also the source files for MathJax, but in version 3, the source files are no longer on the CDN, as they are not what are run in the browser.</p> <p>The components are stored in the <code>es5</code> directory, and are in ES5 format for the widest possible compatibility.  In the future, we may make an <code>es6</code> directory containing ES6 versions of the components.</p>"},{"location":"static/node_modules/mathjax/#installation-and-use","title":"Installation and Use","text":""},{"location":"static/node_modules/mathjax/#using-mathjax-components-from-a-cdn-on-the-web","title":"Using MathJax components from a CDN on the web","text":"<p>If you are loading MathJax from a CDN into a web page, there is no need to install anything.  Simply use a <code>script</code> tag that loads MathJax from the CDN.  E.g.,</p> <pre><code>&lt;script id=\"MathJax-script\" async src=\"https://cdn.jsdelivr.net/npm/mathjax@3/es5/tex-mml-chtml.js\"&gt;&lt;/script&gt;\n</code></pre> <p>See the MathJax documentation, the MathJax Web Demos, and the MathJax Component Repository for more information.</p>"},{"location":"static/node_modules/mathjax/#hosting-your-own-copy-of-the-mathjax-components","title":"Hosting your own copy of the MathJax Components","text":"<p>If you want to host MathJax from your own server, you can do so by installing the <code>mathjax</code> package using <code>npm</code> and moving the <code>es5</code> directory to an appropriate location on your server:</p> <pre><code>npm install mathjax@3\nmv node_modules/mathjax/es5 &lt;path-to-server-location&gt;/mathjax\n</code></pre> <p>Note that we are still making updates to version 2, so include <code>@3</code> when you install, since the latest chronological version may not be version 3.</p> <p>Alternatively, you can get the files via GitHub:</p> <pre><code>git clone https://github.com/mathjax/MathJax.git mj-tmp\nmv mj-tmp/es5 &lt;path-to-server-location&gt;/mathjax\nrm -rf mj-tmp\n</code></pre> <p>Then (in either case) you can use a script tag like the following:</p> <pre><code>&lt;script id=\"MathJax-script\" async src=\"&lt;url-to-your-site&gt;/mathjax/tex-chtml.js\"&gt;&lt;/script&gt;\n</code></pre> <p>where <code>&lt;url-to-your-site&gt;</code> is replaced by the URL to the location where you moved the MathJax files above.</p> <p>See the documentation for details.</p>"},{"location":"static/node_modules/mathjax/#using-mathjax-components-in-a-node-application","title":"Using MathJax components in a node application","text":"<p>To use MathJax components in a node application, install the <code>mathjax</code> package:</p> <pre><code>npm install mathjax@3\n</code></pre> <p>(we are still making updates to version 2, so you should include <code>@3</code> since the latest chronological version may not be version 3).</p> <p>Then require <code>mathjax</code> within your application:</p> <pre><code>require('mathjax').init({ ... }).then((MathJax) =&gt; { ... });\n</code></pre> <p>where the first <code>{ ... }</code> is a MathJax configuration, and the second <code>{ ... }</code> is the code to run after MathJax has been loaded.  E.g.</p> <pre><code>require('mathjax').init({\nloader: {load: ['input/tex', 'output/svg']}\n}).then((MathJax) =&gt; {\nconst svg = MathJax.tex2svg('\\\\frac{1}{x^2-1}', {display: true});\nconsole.log(MathJax.startup.adaptor.outerHTML(svg));\n}).catch((err) =&gt; console.log(err.message));\n</code></pre> <p>Note: this technique is for node-based application only, not for browser applications.  This method sets up an alternative DOM implementation, which you don't need in the browser, and tells MathJax to use node's <code>require()</code> command to load external modules.  This setup will not work properly in the browser, even if you webpack it or bundle it in other ways.</p> <p>See the documentation and the MathJax Node Repository for more details.</p>"},{"location":"static/node_modules/mathjax/#reducing-the-size-of-the-components-directory","title":"Reducing the Size of the Components Directory","text":"<p>Since the <code>es5</code> directory contains all the component files, so if you are only planning one use one configuration, you can reduce the size of the MathJax directory by removing unused components. For example, if you are using the <code>tex-chtml.js</code> component, then you can remove the <code>tex-mml-chtml.js</code>, <code>tex-svg.js</code>, <code>tex-mml-svg.js</code>, <code>tex-chtml-full.js</code>, and <code>tex-svg-full.js</code> configurations, which will save considerable space.  Indeed, you should be able to remove everything other than <code>tex-chtml.js</code>, and the <code>input/tex/extensions</code>, <code>output/chtml/fonts/woff-v2</code>, <code>adaptors</code>, <code>a11y</code>, and <code>sre</code> directories.  If you are using the results only on the web, you can remove <code>adaptors</code> as well.</p> <p>If you are not using A11Y support (e.g., speech generation, or semantic enrichment), then you can remove <code>a11y</code> and <code>sre</code> as well (though in this case you may need to disable the assistive tools in the MathJax contextual menu in order to avoid MathJax trying to load them when they aren't there).</p> <p>If you are using SVG rather than CommonHTML output (e.g., <code>tex-svg.js</code> rather than <code>tex-chtml.js</code>), you can remove the <code>output/chtml/fonts/woff-v2</code> directory.  If you are using MathML input rather than TeX (e.g., <code>mml-chtml.js</code> rather than <code>tex-chtml.js</code>), then you can remove <code>input/tex/extensions</code> as well.</p>"},{"location":"static/node_modules/mathjax/#the-component-files-and-pull-requests","title":"The Component Files and Pull Requests","text":"<p>The <code>es5</code> directory is generated automatically from the contents of the MathJax source repository.  You can rebuild the components using the command</p> <pre><code>npm run make-es5 --silent\n</code></pre> <p>Note that since the contents of this repository are generated automatically, you should not submit pull requests that modify the contents of the <code>es5</code> directory.  If you wish to submit a modification to MathJax, you should make a pull request in the MathJax source repository.</p>"},{"location":"static/node_modules/mathjax/#mathjax-community","title":"MathJax Community","text":"<p>The main MathJax website is http://www.mathjax.org, and it includes announcements and other important information.  A MathJax user forum for asking questions and getting assistance is hosted at Google, and the MathJax bug tracker is hosted at GitHub.</p> <p>Before reporting a bug, please check that it has not already been reported.  Also, please use the bug tracker (rather than the help forum) for reporting bugs, and use the user's forum (rather than the bug tracker) for questions about how to use MathJax.</p>"},{"location":"static/node_modules/mathjax/#mathjax-resources","title":"MathJax Resources","text":"<ul> <li>MathJax Documentation</li> <li>MathJax Components</li> <li>MathJax Source Code</li> <li>MathJax Web Examples</li> <li>MathJax Node Examples</li> <li>MathJax Bug Tracker</li> <li>MathJax Users' Group</li> </ul>"}]}